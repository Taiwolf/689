MediaBucks %>%
select(Gender, Salary) %>%
group_by(Gender) %>%
summarize(Total = sum(Salary, na.rm=TRUE))
library(tidyverse)
#load the library for rio
#load the library for janitor
MediaBucks <- rio::import("https://docs.google.com/spreadsheets/d/1y2w31HHwE31N9pJoIB1W8oWgW7citB4hzjo99XfwVqo/edit#gid=357643135", sheet = "RealMediaSalaries2")
#head provides a peak at the first six rows of data
head(MediaBucks)
BigBoys <- filter(MediaSalary, COMPANY %in% c("NewYorkTimes", "WallStreetJournal", "Bloomberg"))
WSJ <- subset(MediaBucks, COMPANY=="WallStreetJournal")
MediaSalary <- MediaBucks %>%
filter(Salary >= 1000)
Journal <- subset(MediaBucks, grepl("?Journal", COMPANY))
Bloom <- subset(MediaBucks, grepl("?Bloomberg", COMPANY))
BigBoys <- filter(MediaSalary, COMPANY %in% c("NewYorkTimes", "WallStreetJournal", "Bloomberg"))
library(tidyverse)
#load the library for rio
#load the library for janitor
MediaBucks <- rio::import("https://docs.google.com/spreadsheets/d/1y2w31HHwE31N9pJoIB1W8oWgW7citB4hzjo99XfwVqo/edit#gid=357643135", sheet = "RealMediaSalaries2")
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
knitr::opts_chunk$set(echo = TRUE)
load the librayr for rio
load the librayr for rio
("janitor")
install.packages("tidyverse")
install.packages("rio")
install.packages("janitor")
install.packages("tidyverse")
install.packages("rio")
#head provides a peak at the first six rows of data
head(MediaBucks)
nrow(MediaBucks)
ncol(MediaBucks) #use the command ncol to determine the number of columns
glimpse(MediaBucks)#use the command glimpse to see the file types, names
library(tidyverse)
#load the library for rio
#load the library for janitor
MediaBucks <- rio::import("https://docs.google.com/spreadsheets/d/1y2w31HHwE31N9pJoIB1W8oWgW7citB4hzjo99XfwVqo/edit#gid=357643135", sheet = "RealMediaSalaries2")
#head provides a peak at the first six rows of data
head(MediaBucks)
nrow(MediaBucks)
MediaBucks %>%
select(Gender, Salary) %>%
group_by(Gender) %>%
summarize(Total = sum(Salary, na.rm=TRUE))
MediaBucks %>%
count(Gender) %>%
arrange(desc(n))
MediaSalary <- MediaBucks %>%
filter(Salary >= 1000)
WSJ <- subset(MediaBucks, COMPANY=="WallStreetJournal")
summary(WSJ$Salary)
Journal <- subset(MediaBucks, grepl("?Journal", COMPANY))
Bloom <- subset(MediaBucks, grepl("?Bloomberg", COMPANY))
#1: Build a table for NewYorkTimes employees
NYT <- subset(MediaBucks, grepl("?NewYorkTimes", COMPANY))
#1: Build a table for NewYorkTimes employees
NYT <- subset(MediaBucks, grepl("NewYorkTimes", COMPANY))
#1: Build a table for NewYorkTimes employees
NYT <- subset(MediaBucks, grepl("NewYorkTimes", COMPANY))
Summary(NYT$Salary)
Summary(NewYorkTimes$Salary)
WSJ <- subset(MediaBucks, COMPANY=="WallStreetJournal")
Summary(NYT$Salary)
#1: Build a table for NewYorkTimes employees
NYT <- subset(MediaBucks, grepl("NewYorkTimes", COMPANY))
summary(NYT$Salary)
setwd("~/code/689")
install.packages("tidyverse")
install.packages("rio")
install.packages("janitor")
install.packages("tidyverse")
#install.packages("tidyverse")
#install.packages("rio")
#install.packages("janitor")
library(tidyverse)
library(rio)#load the library for tidy
library(janitor)#load the library for janitor
MediaBucks <- rio::import("https://docs.google.com/spreadsheets/d/1y2w31HHwE31N9pJoIB1W8oWgW7citB4hzjo99XfwVqo/edit#gid=357643135", sheet = "RealMediaSalaries2")
View(MediaBucks)
ncol(MediaBucks)#use the command ncol to determine the number of columns
glimpse(MediaBucks)#use the command glimpse to see the file types, names
names(MediaBucks)# use the command names to see the file names
head(MediaBucks)
#Displays the first six rows of data
summary(MediaBucks$Salary)
#We just used sum to determine total salaries.
#mean is the command to determine averages.
#replace sum for mean: sum(MediaBucks$Salary, na.rm=TRUE)
mean(MediaBucks$Salary, na.rm=TRUE)
MediaBucks %>%
select(Gender, Salary) %>%
group_by(Gender) %>%
summarize(Total = sum(Salary, na.rm=TRUE))
MediaBucks %>%
count(Gender) %>%
arrange(desc(n))
#Using the example code above, create a column called Avg_Salary and use the mean command to produce the calculation
#Adapt the code below to do this:
MediaBucks %>%
select(Gender, Salary) %>%
group_by(Gender) %>%
summarize(Total = mean(Salary, na.rm=TRUE))
#Using the example code above, create a column called Avg_Salary and use the mean command to produce the calculation
#Adapt the code below to do this:
MediaBucks %>%
select(Gender, Salary) %>%
group_by(Gender) %>%
summarize(Ave_Salary = mean(Salary, na.rm=TRUE))
MediaSalary <- MediaBucks %>%
filter(Salary >= 1000)
#2: Determine median salary of NewYorkTimes employees
median(NYT$Salary)
View(NYT)
#3: Identify title, gender and race of the highest paid position at NYT
NYT%>%
select(Title, Salary)%>%
group_by(TITLE)%>%
#3: Identify title, gender and race of the highest paid position at NYT
NYT%>%
select(Title, Salary)%>%
group_by(TITLE)%>%
print(NYT%>%)
#3: Identify title, gender and race of the highest paid position at NYT
NYT%>%
select(Title, Salary)%>%
group_by(TITLE)%>%
print(NYT%>%)
#3: Identify title, gender and race of the highest paid position at NYT
NYT%>%
select(Title, Salary)%>%
group_by(TITLE)%>%
print("NYT%>%")
#3: Identify title, gender and race of the highest paid position at NYT
NYT%>%
select(Title)%>%
group_by(TITLE)%>%
#3: Identify title, gender and race of the highest paid position at NYT
highest_paid <- NYT %>%
arrange(desc(Salary)) %>%  # Sort the data by Salary in descending order
slice(1)  # Select the first row, which is the highest paid
View(highest_paid)
#3: Identify title, gender and race of the highest paid position at NYT
highest_paid <- NYT %>%
arrange(desc(Salary)) %>%  # Sort the data by Salary in descending order
#3: Identify title, gender and race of the highest paid position at NYT
highest_paid <- NYT %>%
arrange(desc(Salary)) %>%  # Sort the data by Salary in descending order
slice(1)  # Select the first row, which is the highest paid
View(highest_paid)
#3: Identify title, gender and race of the highest paid position at NYT
highest_paid <- NYT %>%
arrange(desc(Salary)) %>%  # Sort the data by Salary in descending order
select(Title, Gender, Race)
#3: Identify title, gender and race of the highest paid position at NYT
highest_paid <- NYT %>%
arrange(desc(Salary)) %>%  # Sort the data by Salary in descending order
select(JOB_DUTIES, Gender, Race)
#3: Identify title, gender and race of the highest paid position at NYT
highest_paid <- NYT %>%
arrange(desc(Salary)) %>%  # Sort the data by Salary in descending order
select(JOB_DUTIES, Gender, Race)
highest_paid(JOB_DUTIES, Gender, Race)
#3: Identify title, gender and race of the highest paid position at NYT
highest_paid <- NYT %>%
arrange(desc(Salary)) %>%  # Sort the data by Salary in descending order
select(JOB_DUTIES, Gender, Race)
highest_paid(Salary)
#3: Identify title, gender and race of the highest paid position at NYT
highest_paid <- NYT %>%
arrange(desc(Salary)) %>%  # Sort the data by Salary in descending order
select(JOB_DUTIES, Gender, Race)
slice(1)
#3: Identify title, gender and race of the highest paid position at NYT
highest_paid <- NYT %>%
arrange(desc(Salary)) %>%  # Sort the data by Salary in descending order
slice(1)
#4: Build a table that filters "Business" in the Company column. Determine Summary of the Salary column.
#Build a second table that filters "Bloomberg" in the Company column.  Determine Summary of the Salary column.
#Which one is higher?
Business <- subset(MediaBucks, grepl("?Business", COMPANY))
#4: Build a table that filters "Business" in the Company column. Determine Summary of the Salary column.
#Build a second table that filters "Bloomberg" in the Company column.  Determine Summary of the Salary column.
#Which one is higher?
Business <- subset(MediaBucks, grepl("?Business", COMPANY))
summary(Business)
#4: Build a table that filters "Business" in the Company column. Determine Summary of the Salary column.
#Build a second table that filters "Bloomberg" in the Company column.  Determine Summary of the Salary column.
#Which one is higher?
Business <- subset(MediaBucks, grepl("?Business", COMPANY))
summary(Business)
summary(Bloom)
BigBoys <- filter(MediaSalary, COMPANY %in% c("NewYorkTimes", "WallStreetJournal", "Bloomberg"))
Reporters <- subset(MediaBucks, grepl("?reporter", TITLE))
summary(Reporters$Salary)
WSJ_Black <- MediaBucks %>% filter(Race =="black", COMPANY == "WallStreetJournal")
View(WSJ_Black)
Reporters <- subset(MediaBucks, grepl("?reporter", TITLE))
summary(Reporters$Salary)
Editors<-subset(MediaBucks, grepl("?editors", TITLE))
Reporters <- subset(MediaBucks, grepl("?reporter", TITLE))
summary(Reporters$Salary)
Editors<-subset(MediaBucks, grepl("?editors", TITLE))
summart(Editors$Salary)
Reporters <- subset(MediaBucks, grepl("?reporter", TITLE))
summary(Reporters$Salary)
Editors<-subset(MediaBucks, grepl("?editors", TITLE))
summary(Editors$Salary)
WSJ_Black <- MediaBucks %>% filter(Race =="black", COMPANY == "WallStreetJournal")
MediaBucks %>%
select(Race, Salary) %>%
group_by(Race) %>%
summarize(Avg_Salary = mean(Salary, na.rm=TRUE)) %>%
arrange(desc(Avg_Salary))
MediaBucks %>%
count(Race) %>%
arrange(desc(n))
MediaBucks %>%
select(Race, Salary) %>%
group_by(Race) %>%
summarize(Total=n(),
Avg = mean(Salary, na.rm=TRUE)) %>%
arrange(desc(Total))
#details: https://stackoverflow.com/questions/36183601/average-and-count-with-aggregation-in-r-with-dplyr
